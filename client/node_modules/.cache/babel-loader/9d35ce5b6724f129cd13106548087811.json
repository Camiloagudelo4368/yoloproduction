{"ast":null,"code":"import _classCallCheck from \"/Users/camilo/Columbia/YOLO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/camilo/Columbia/YOLO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/camilo/Columbia/YOLO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/camilo/Columbia/YOLO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/camilo/Columbia/YOLO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'React';\nimport axios from \"axios\";\nimport ajax from 'ajax'; // axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\n\nvar credentials = {\n  // Alan\n  // 'x-app-id': 'a49cbcf2',\n  // 'x-app-key': '8fbb4486f5134e84e81d6f3918835982'\n  // Camilo\n  // 'x-app-id': '7af0b356',\n  // 'x-app-key': '59c8379f40e5797d62d756d0b858bc5b',\n  // 'x-app-key': '6dd125bab9d995bde5f71cc6399ddbd8'\n  // Rob\n  'x-app-id': 'e0a12c3e',\n  'x-app-key': 'ecea00b679c66c1d11b141d4833d152d'\n};\n\nvar API =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(API, _React$Component);\n\n  function API(props) {\n    var _this;\n\n    _classCallCheck(this, API);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(API).call(this, props));\n    _this.scrapeSearch = _this.scrapeSearch.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Get restaurants based on geolocation\n\n    getRestaurants = function getRestaurants(lat, lng) {\n      var config = {\n        headers: Object.assign({}, credentials),\n        url: \"https://trackapi.nutritionix.com/v2/locations\",\n        method: 'GET',\n        contentType: 'application/json',\n        params: {\n          ll: \"\".concat(lat, \",\").concat(lng),\n          distance: '5mi',\n          limit: 50\n        }\n      };\n      return axios(config);\n    }, getRestaurantsByBrandId = function getRestaurantsByBrandId(brandIds, querySearch) {\n      var config = {\n        headers: Object.assign({}, credentials),\n        url: \"https://trackapi.nutritionix.com/v2/search/instant\",\n        method: 'GET',\n        contentType: 'application/json',\n        params: {\n          query: querySearch,\n          branded: true,\n          self: false,\n          common: false,\n          brand_ids: brandIds,\n          branded_region: 1\n        }\n      };\n      return axios(config);\n    }, getFoodItemByItemId = function getFoodItemByItemId(itemId) {\n      var config = {\n        headers: Object.assign({}, credentials),\n        url: \"https://trackapi.nutritionix.com/v2/search/item?nix_item_id=\".concat(itemId),\n        // nix_item_id: itemId,\n        upc: 0,\n        claims: true,\n        method: 'GET',\n        contentType: 'application/json'\n      };\n      return axios(config);\n    }, getFoodByQuery = function getFoodByQuery(query) {\n      // We have to add this url before to avoid the CROS policy issues\n      var preUrl = 'https://cors-anywhere.herokuapp.com/';\n      var config = {\n        headers: Object.assign({}, credentials),\n        url: \"https://trackapi.nutritionix.com/v2/search/instant\",\n        // nix_item_id: itemId,\n        line_delimited: false,\n        query: \"burger\",\n        params: {\n          query: query,\n          branded: true,\n          self: true,\n          common: true,\n          // brand_ids: brandIds,\n          branded_region: 1\n        },\n        // query: query,\n        // timezone: \"America/New_York\",\n        // use_branded_foods: false,\n        // use_raw_foods: false,\n        method: 'GET',\n        contentType: 'application/json'\n      };\n      return axios(config).then(function (result) {\n        result.data.branded.forEach(function (element) {\n          console.log(element);\n          var itemId = element.nix_item_id;\n\n          _this.getFoodItemByItemId(itemId).then(function (response) {\n            console.log('response.data item', response.data);\n          });\n        });\n      });\n    };\n    return _this;\n  }\n\n  return API;\n}(React.Component);\n\nexport default API;","map":{"version":3,"sources":["/Users/camilo/Columbia/YOLO/client/src/utils/API.js"],"names":["React","axios","ajax","credentials","API","props","scrapeSearch","bind","getRestaurants","lat","lng","config","headers","Object","assign","url","method","contentType","params","ll","distance","limit","getRestaurantsByBrandId","brandIds","querySearch","query","branded","self","common","brand_ids","branded_region","getFoodItemByItemId","itemId","upc","claims","getFoodByQuery","preUrl","line_delimited","then","result","data","forEach","element","console","log","nix_item_id","response","Component"],"mappings":"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","sourcesContent":["\nimport React from 'React'\nimport axios from \"axios\";\nimport ajax from 'ajax'\n// axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\n\nconst credentials = {\n\n    // Alan\n    // 'x-app-id': 'a49cbcf2',\n    // 'x-app-key': '8fbb4486f5134e84e81d6f3918835982'\n\n    // Camilo\n    // 'x-app-id': '7af0b356',\n    // 'x-app-key': '59c8379f40e5797d62d756d0b858bc5b',\n    // 'x-app-key': '6dd125bab9d995bde5f71cc6399ddbd8'\n\n    // Rob\n    'x-app-id': 'e0a12c3e',\n    'x-app-key': 'ecea00b679c66c1d11b141d4833d152d',\n}\n\nclass API extends React.Component {\n    constructor(props) {\n        super(props);\n        this.scrapeSearch = this.scrapeSearch.bind(this);\n\n\n        // Get restaurants based on geolocation\n        getRestaurants = (lat, lng) => {\n\n\n            const config = {\n                headers: Object.assign({}, credentials),\n                url: \"https://trackapi.nutritionix.com/v2/locations\",\n                method: 'GET',\n                contentType: 'application/json',\n                params: {\n                    ll: `${lat},${lng}`,\n                    distance: '5mi',\n                    limit: 50\n                }\n            }\n\n            return axios(config)\n        },\n\n\n            getRestaurantsByBrandId = (brandIds, querySearch) => {\n\n\n                const config = {\n                    headers: Object.assign({}, credentials),\n                    url: \"https://trackapi.nutritionix.com/v2/search/instant\",\n                    method: 'GET',\n                    contentType: 'application/json',\n                    params: {\n                        query: querySearch,\n                        branded: true,\n                        self: false,\n                        common: false,\n                        brand_ids: brandIds,\n                        branded_region: 1,\n                    }\n                }\n\n                return axios(config)\n            },\n\n            getFoodItemByItemId = function (itemId) {\n\n                const config = {\n                    headers: Object.assign({}, credentials),\n                    url: `https://trackapi.nutritionix.com/v2/search/item?nix_item_id=${itemId}`,\n                    // nix_item_id: itemId,\n                    upc: 0,\n                    claims: true,\n                    method: 'GET',\n                    contentType: 'application/json',\n                }\n\n                return axios(config)\n            },\n\n            getFoodByQuery = (query) => {\n                // We have to add this url before to avoid the CROS policy issues\n                const preUrl = 'https://cors-anywhere.herokuapp.com/'\n\n                const config = {\n                    headers: Object.assign({}, credentials),\n                    url: `https://trackapi.nutritionix.com/v2/search/instant`,\n                    // nix_item_id: itemId,\n                    line_delimited: false,\n                    query: \"burger\",\n                    params: {\n                        query: query,\n                        branded: true,\n                        self: true,\n                        common: true,\n                        // brand_ids: brandIds,\n                        branded_region: 1,\n                    },\n                    // query: query,\n                    // timezone: \"America/New_York\",\n                    // use_branded_foods: false,\n                    // use_raw_foods: false,\n                    method: 'GET',\n                    contentType: 'application/json',\n                }\n\n                return axios(config).then(result => {\n\n                    result.data.branded.forEach(element => {\n                        console.log(element)\n                        const itemId = element.nix_item_id\n                        this.getFoodItemByItemId(itemId).then(response => {\n                            console.log('response.data item', response.data)\n                        })\n                    });\n                })\n\n            }\n    }\n}\n\n\nexport default API"]},"metadata":{},"sourceType":"module"}